// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  subdomain          String              @unique
  status             String              @default("Active")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  organizations      Organization[]
  portfolios         Portfolio[]
  programs           Program[]
  projects           Project[]
  requirements       Requirement[]
  architectureLayers ArchitectureLayer[]
  components         Component[]
  tasks              Task[]
  resources          Resource[]
  risks              Risk[]
  activityLogs       ActivityLog[]

  @@index([subdomain])
  @@index([name])
}

model Organization {
  id                Int         @id @default(autoincrement())
  name              String
  status            String      @default("Active")
  organizationOwner String
  tenantId          Int
  tenant            Tenant      @relation(fields: [tenantId], references: [id])
  portfolios        Portfolio[]
  resources         Resource[]
  createdBy         String
  modifiedBy        String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([name, tenantId])
}

model Portfolio {
  id             Int          @id @default(autoincrement())
  portfolioKey   String       @unique
  name           String
  status         String       @default("Active")
  portfolioOwner String
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  tenantId       Int
  tenant         Tenant       @relation(fields: [tenantId], references: [id])
  programs       Program[]
  createdBy      String
  modifiedBy     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Program {
  id            Int       @id @default(autoincrement())
  programKey    String    @unique
  name          String
  status        String    @default("Active")
  programOwner  String
  startDate     DateTime
  targetEndDate DateTime
  actualEndDate DateTime?
  portfolioId   Int
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id])
  tenantId      Int
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  projects      Project[]
  risks         Risk[]
  createdBy     String
  modifiedBy    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Project {
  id            Int           @id @default(autoincrement())
  projectKey    String        @unique
  name          String
  status        String        @default("Active")
  projectOwner  String
  url           String?
  startDate     DateTime
  targetEndDate DateTime
  actualEndDate DateTime?
  programId     Int
  program       Program       @relation(fields: [programId], references: [id])
  tenantId      Int
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  requirements  Requirement[]
  risks         Risk[]
  createdBy     String
  modifiedBy    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Requirement {
  id                 Int                 @id @default(autoincrement())
  requirementKey     String              @unique
  title              String
  requirementOwner   String
  status             String
  url                String?
  projectId          Int
  project            Project             @relation(fields: [projectId], references: [id])
  tenantId           Int
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  architectureLayers ArchitectureLayer[]
  createdBy          String
  modifiedBy         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model ArchitectureLayer {
  id                     Int         @id @default(autoincrement())
  title                  String
  architectureLayerOwner String
  requirementId          Int
  requirement            Requirement @relation(fields: [requirementId], references: [id])
  tenantId               Int
  tenant                 Tenant      @relation(fields: [tenantId], references: [id])
  components             Component[]
  createdBy              String
  modifiedBy             String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
}

model Component {
  id                  Int               @id @default(autoincrement())
  name                String
  componentOwner      String
  url                 String?
  sourceCodeUrl       String?
  architectureLayerId Int
  architectureLayer   ArchitectureLayer @relation(fields: [architectureLayerId], references: [id])
  tenantId            Int
  tenant              Tenant            @relation(fields: [tenantId], references: [id])
  tasks               Task[]
  risks               Risk[]
  createdBy           String
  modifiedBy          String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Task {
  id            Int        @id @default(autoincrement())
  taskKey       String     @unique
  name          String
  taskOwner     String
  status        String
  startDate     DateTime
  targetEndDate DateTime
  actualEndDate DateTime?
  url           String?
  componentId   Int
  component     Component  @relation(fields: [componentId], references: [id])
  tenantId      Int
  tenant        Tenant     @relation(fields: [tenantId], references: [id])
  resources     Resource[]
  dependencies  Task[]     @relation("TaskDependencies")
  dependents    Task[]     @relation("TaskDependencies")
  createdBy     String
  modifiedBy    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Resource {
  id             Int          @id @default(autoincrement())
  name           String
  status         String
  startDate      DateTime
  endDate        DateTime
  availability   Float // Percentage of availability
  taskId         Int
  task           Task         @relation(fields: [taskId], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  tenantId       Int
  tenant         Tenant       @relation(fields: [tenantId], references: [id])
  createdBy      String
  modifiedBy     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Risk {
  id                 Int        @id @default(autoincrement())
  riskDescription    String
  probability        Float
  impact             Float
  mitigationStrategy String
  status             String
  programId          Int?
  projectId          Int?
  componentId        Int?
  program            Program?   @relation(fields: [programId], references: [id])
  project            Project?   @relation(fields: [projectId], references: [id])
  component          Component? @relation(fields: [componentId], references: [id])
  tenantId           Int
  tenant             Tenant     @relation(fields: [tenantId], references: [id])
  createdBy          String
  modifiedBy         String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model ActivityLog {
  id           Int      @id @default(autoincrement())
  userId       Int
  action       String // e.g., "CREATE", "UPDATE", "DELETE"
  entity       String // e.g., "Project", "Task"
  entityId     Int // ID of the entity being modified
  timestamp    DateTime @default(now())
  details      String? // Optional field for additional details
  previousData Json? // Stores the previous state of the data
  tenantId     Int
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}
